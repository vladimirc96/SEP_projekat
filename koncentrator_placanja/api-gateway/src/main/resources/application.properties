spring.application.name=api-gateway


eureka.instance.hostname:localhost
eureka.instance.secure-port-enabled=true
eureka.instance.secure-port=${TLS_PORT}

eureka.client.serviceUrl.defaultZone:https://localhost:8761/eureka
eureka.client.secure-port-enabled: true


zuul.routes.koncentrator.serviceId=koncentrator
zuul.routes.bank-service.serviceId=bank-service
zuul.routes.paypal-service.serviceId=paypal-service
zuul.routes.bitcoin-service.serviceId=bitcoin-service

zuul.host.socket-timeout-millis=30000
zuul.ribbon.eager-load.enabled=true

ribbon.ReadTimeout=10000
ribbon.ConnectTimeout=10000

ribbon.eureka.enabled=true

zuul.sensitive-headers=

hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds= 60000
hystrix.command.gateway.execution.isolation.thread.timeoutInMilliseconds= 60000



# Define a custom port instead of the default 8080
server.port=${TLS_PORT}
server.port.http=${PORT}
server.ssl.enabled=true
## SSL protocol to use.
server.ssl.protocol=TLS
server.ssl.enabled-protocols=TLSv1.2

## Tell Spring Security (if used) to require requests over HTTPS
#
## SSL protocol to use.
# The format used for the keystore. It could be set to JKS in case it is a JKS file
server.ssl.key-store-type=JKS
server.ssl.key-store-provider=SUN
# The path to the keystore containing the certificate
server.ssl.key-store=${SSL_STORE}
# The password used to generate the certificate
server.ssl.key-store-password=${SSL_KEY_STORE_PASS}
# The alias mapped to the certificate
server.ssl.key-alias=${SSL_KEY_ALIAS}

server.ssl.trust-store=${SSL_TRUST_STORE}
server.ssl.trust-store-provider=SUN
server.ssl.trust-store-password=${SSL_KEY_STORE_PASS}