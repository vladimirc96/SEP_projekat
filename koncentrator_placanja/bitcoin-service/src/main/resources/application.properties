spring.application.name = bitcoin-service

#spring.datasource.url = jdbc:mysql://${DB_ADDRESS}/megatravel_mba?useSSL=false&createDatabaseIfNotExist=true
#spring.datasource.username =${DB_USERNAME}
#spring.datasource.password = ${DB_PASS}
#
#spring.datasource.dbcp.test-while-idle = true
#spring.datasource.dbcp.validation-query = SELECT 1
#
#spring.jpa.show-sql = true
#
#spring.jpa.hibernate.ddl-auto = create-drop
#spring.jpa.hibernate.naming.strategy = org.hibernate.cfg.ImprovedNamingStrategy
#spring.datasource.initialization-mode=always
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect



eureka.instance.hostname:localhost
eureka.instance.secure-port-enabled=true
eureka.instance.secure-port=8442


eureka.client.serviceUrl.defaultZone:http://localhost:8761/eureka
#eureka.client.secure-port-enabled: true




ribbon.eureka.enabled=true


# Define a custom port instead of the default 8080
server.port=8442
server.port.http=8081

#server.ssl.enabled=true
### SSL protocol to use.
#server.ssl.protocol=TLS
#server.ssl.enabled-protocols=TLSv1.2

## Tell Spring Security (if used) to require requests over HTTPS
#
## SSL protocol to use.
# The format used for the keystore. It could be set to JKS in case it is a JKS file
#server.ssl.key-store-type=JKS
#server.ssl.key-store-provider=SUN
## The path to the keystore containing the certificate
#server.ssl.key-store=${SSL_STORE}
## The password used to generate the certificate
#server.ssl.key-store-password=${SSL_KEY_STORE_PASS}
## The alias mapped to the certificate
#server.ssl.key-alias=${SSL_KEY_ALIAS}
#
#server.ssl.trust-store=${SSL_STORE}
#server.ssl.trust-store-provider=SUN
#server.ssl.trust-store-password=${SSL_KEY_STORE_PASS}
