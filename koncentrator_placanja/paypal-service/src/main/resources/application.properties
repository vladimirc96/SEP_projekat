spring.application.name = paypal-service

spring.datasource.url = jdbc:mysql://${DB_ADDRESS}/paypal_service?useSSL=false&createDatabaseIfNotExist=true
spring.datasource.username =${DB_USERNAME}
spring.datasource.password = ${DB_PASS}

#korisno ako je konekcija dugo u idle stanju
spring.datasource.dbcp.test-while-idle = true
spring.datasource.dbcp.validation-query = SELECT 1
#JPA-Hibernate
spring.jpa.show-sql = true
#kreira tabele na osnovu anotacija @Entity i kada aplikacija zavrsi sa radom dropuje ih
spring.jpa.hibernate.ddl-auto = create-drop
#bira najbolje konvencije imenovanja za tabele i polja u bazi
spring.jpa.hibernate.naming.strategy = org.hibernate.cfg.ImprovedNamingStrategy
spring.datasource.initialization-mode=always
#optimizacija za mysql upite
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

eureka.instance.hostname:localhost
eureka.instance.secure-port-enabled=true
eureka.instance.secure-port=8443

eureka.client.serviceUrl.defaultZone:https://localhost:8761/eureka/
eureka.client.secure-port-enabled: true

ribbon.eureka.enabled=true

# Define a custom port instead of the default 8080
server.port=8443
#server.port.http=8083
#server.ssl.enabled=true
### SSL protocol to use.
#server.ssl.protocol=TLS
#server.ssl.enabled-protocols=TLSv1.2
#
### Tell Spring Security (if used) to require requests over HTTPS
##
### SSL protocol to use.
## The format used for the keystore. It could be set to JKS in case it is a JKS file
#server.ssl.key-store-type=JKS
#server.ssl.key-store-provider=SUN
## The path to the keystore containing the certificate
#server.ssl.key-store=keystores/bbf_sep_paypal-service.jks
## The password used to generate the certificate
#server.ssl.key-store-password=mnogodobrasifra
## The alias mapped to the certificate
#server.ssl.key-alias=bbf_sep_paypal-service
#
#server.ssl.trust-store=keystores/bbf_sep_paypal-service.jks
#server.ssl.trust-store-provider=SUN
#server.ssl.trust-store-password=mnogodobrasifra